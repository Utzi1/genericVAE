smry$sdev^2[smry$sdev^2 > 1]
smry$sdev^2
smry$sdev^2 %>% kable()
smry$sdev^2 %>% kable(., col.names = "Variance")
smry <- summary(prcA) %>% kable()
tibble(smry$sdev^2 = "Varianc" )
tibble("variance" = smry$sdev^2 )
library(tibble)
tibble("variance" = smry$sdev^2 )
tibble("variance" = smry$sdev^2, "Proportional variance contribution" = smry$importance)
tibble("variance" = smry$sdev^2, "Proportional variance contribution" = smry$importance)
tibble("variance" = smry$sdev^2, "Proportional variance contribution" = smry$scale)
tibble("variance" = smry$sdev^2, "Proportional variance contribution" = smry$center)
library(tibble)
smry <- summary(prcA)
View(smry)
tibble("variance" = smry$sdev^2, "Proportional variance contribution" = smry$importance[2])
tibble("variance" = smry$sdev^2, "Proportional variance contribution" = smry$importance[1])
names(smry)
names(smry$importance)
smry$importance
str(smry$importance)
smry$importance[2, 1:10]
tibble("variance" = smry$sdev^2, "Proportional variance contribution" = smry$importance[2, 1:10])
tibble("variance" = smry$sdev^2, "PC" = smry$x[2])
tibble("variance" = smry$sdev^2, "PC" = smry$x[2,])
tibble("variance" = smry$sdev^2, "PC" = c(PC1, PC2, PC3, PC4, PC5, PC6, PC7, PC8, PC9, PC10))
tibble("variance" = smry$sdev^2, "PC" = c("PC1", "PC2", "PC3", "PC4", "PC5", "PC6", "PC7", "PC8", "PC9", "PC10"))
datsa <- tibble("variance" = smry$sdev^2, "PC" = c("PC1", "PC2", "PC3", "PC4", "PC5", "PC6", "PC7", "PC8", "PC9", "PC10"))
kable(datsa)
```{r, echo = F}
prcA <- prcomp(dats[-1], scale = T)
sds <- prcA$sdev
mean(sds^2)
smry <- summary(prcA)
library(tibble)
datsa <- tibble("variance" = smry$sdev^2, "PC" = c("PC1", "PC2", "PC3", "PC4", "PC5", "PC6", "PC7", "PC8", "PC9", "PC10"))
kable(datsa)
datsa <- tibble("variance" = round(smry$sdev^2, 4), "PC" = c("PC1", "PC2", "PC3", "PC4", "PC5", "PC6", "PC7", "PC8", "PC9", "PC10"))
kable(datsa, caption = "Variance of our PCA")
datsa <- tibble("variance" = round(smry$sdev^2, 2), "PC" = c("PC1", "PC2", "PC3", "PC4", "PC5", "PC6", "PC7", "PC8", "PC9", "PC10"))
kable(datsa, caption = "Variance of our PCA")
datsa <- tibble("variance" = round(smry$sdev^2, 2), "PC" = c("PC1", "PC2", "PC3", "PC4", "PC5", "PC6", "PC7", "PC8", "PC9", "PC10"), smry$x[3, 1:10] )
kable(datsa, caption = "Variance of our PCA")
smry
datsa <- tibble("variance" = round(smry$sdev^2, 2), "PC" = c("PC1", "PC2", "PC3", "PC4", "PC5", "PC6", "PC7", "PC8", "PC9", "PC10"), "Cumulative Proportion"smry$x[3, 1:10] )
datsa <- tibble("variance" = round(smry$sdev^2, 2), "PC" = c("PC1", "PC2", "PC3", "PC4", "PC5", "PC6", "PC7", "PC8", "PC9", "PC10"), "Cumulative Proportion"= smry$x[3, 1:10] )
kable(datsa, caption = "Variance of our PCA")
datsa <- tibble("variance" = round(smry$sdev^2, 2), "PC" = c("PC1", "PC2", "PC3", "PC4", "PC5", "PC6", "PC7", "PC8", "PC9", "PC10"), "Cumulative Proportion"= smry$x[2, 1:10] )
kable(datsa, caption = "Variance of our PCA")
datsa <- tibble("variance" = round(smry$sdev^2, 2), "PC" = c("PC1", "PC2", "PC3", "PC4", "PC5", "PC6", "PC7", "PC8", "PC9", "PC10"), "Cumulative Proportion"= smry$x[1:10, 3] )
kable(datsa, caption = "Variance of our PCA")
datsa <- tibble("variance" = round(smry$sdev^2, 2), "PC" = c("PC1", "PC2", "PC3", "PC4", "PC5", "PC6", "PC7", "PC8", "PC9", "PC10"), "Cumulative Proportion"= smry$x[1:10, 2] )
kable(datsa, caption = "Variance of our PCA")
datsa <- tibble("variance" = round(smry$sdev^2, 2), "PC" = c("PC1", "PC2", "PC3", "PC4", "PC5", "PC6", "PC7", "PC8", "PC9", "PC10"), "Cumulative Proportion"= smry$x[3] )
kable(datsa, caption = "Variance of our PCA")
datsa <- tibble("variance" = round(smry$sdev^2, 2), "PC" = c("PC1", "PC2", "PC3", "PC4", "PC5", "PC6", "PC7", "PC8", "PC9", "PC10"), "Cumulative Proportion"= smry$x[3,] )
kable(datsa, caption = "Variance of our PCA")
datsa <- tibble("variance" = round(smry$sdev^2, 2), "PC" = c("PC1", "PC2", "PC3", "PC4", "PC5", "PC6", "PC7", "PC8", "PC9", "PC10"), "Cumulative Proportion"= smry$x[1,] )
kable(datsa, caption = "Variance of our PCA")
datsa <- tibble("variance" = round(smry$sdev^2, 2), "PC" = c("PC1", "PC2", "PC3", "PC4", "PC5", "PC6", "PC7", "PC8", "PC9", "PC10"), "Cumulative Proportion"= smry$x[1,1:10] )
kable(datsa, caption = "Variance of our PCA")
datsa <- tibble("variance" = round(smry$sdev^2, 2), "PC" = c("PC1", "PC2", "PC3", "PC4", "PC5", "PC6", "PC7", "PC8", "PC9", "PC10"), "Cumulative Proportion"= smry$importance[1,1:10] )
kable(datsa, caption = "Variance of our PCA")
datsa <- tibble("variance" = round(smry$sdev^2, 2), "PC" = c("PC1", "PC2", "PC3", "PC4", "PC5", "PC6", "PC7", "PC8", "PC9", "PC10"), "Cumulative Proportion"= smry$importance[3,1:10] )
kable(datsa, caption = "Variance of our PCA")
datsa <- tibble("variance" = round(smry$sdev^2, 2), "PC" = c("PC1", "PC2", "PC3", "PC4", "PC5", "PC6", "PC7", "PC8", "PC9", "PC10"), "Cumulative Proportion"= round(smry$importance[3,1:10]), 2)
kable(datsa, caption = "Variance of our PCA")
datsa <- tibble("variance" = round(smry$sdev^2, 2), "PC" = c("PC1", "PC2", "PC3", "PC4", "PC5", "PC6", "PC7", "PC8", "PC9", "PC10"), "Cumulative Proportion"= round(smry$importance[3,1:10]))
kable(datsa, caption = "Variance of our PCA")
datsa <- tibble("variance" = round(smry$sdev^2, 2), "PC" = c("PC1", "PC2", "PC3", "PC4", "PC5", "PC6", "PC7", "PC8", "PC9", "PC10"), "Cumulative Proportion"= round(smry$importance[3,1:10]), 3)
kable(datsa, caption = "Variance of our PCA")
datsa <- tibble("variance" = round(smry$sdev^2, 2), "PC" = c("PC1", "PC2", "PC3", "PC4", "PC5", "PC6", "PC7", "PC8", "PC9", "PC10"), "Cumulative Proportion"= round(smry$importance[3,1:10], 2))
kable(datsa, caption = "Variance of our PCA")
library(psych)
pince <- principal(dats[-1])
prnc <- principal(dats[-1])
prnc
prnc <- principal(dats[-1], nfactors = 2)
prnc
prnc$loadings
prnc
prnc$loadings %>% kable()
prnc$loadings %>% kable()
prnc$loadings %>% str()
prnc$loadings %>% str()
prnc
prnc$loadings[1,1]
prnc$loadings[1,]
prnc$loadings[1]
prnc$loadings[1:10]
prnc
prnc$loadings[1:10]
prnc$loadings[1:10, 1:2]
prnc$loadings[1::, 1:2]
prnc$loadings[::, 1:2]
prnc$loadings[, 1:2]
prnc$loadings[, 1:2] %>% kable()
library(psych)
knitr::opts_chunk$set(echo = TRUE)
library(psych)
library(Hmisc)
library(magrittr)
library(knitr)
library(tibble)
dats <- read.csv("drugs_2022.csv", header = T, sep = ";", dec = ",")
# compute the fold change
fldchng <- dats
for (item in 2:11) {
fldchng[item] <- dats[item] / dats$Control
}
# now lets compute the log2 of this data:
lg2.fld <- cbind(as.factor(dats$cytokines), log2(fldchng[3:11]))
str(lg2.fld)
colnames(lg2.fld)[1] <- "cytokine"
prnc$loadings[2:10, 1:2] %>% kable()
prnc$loadings[2:10, 1:2] %>% round(., 2) %>% kable()
prnc <- principal(dats[-1], nfactors = 2, rotate = "varimax")
cbind(prnc$loadings[2:10, 1:2], c("") ) %>% round(., 2) %>% kable()
prnc <- principal(dats[-1], nfactors = 2, rotate = "varimax")
cbind(prnc$loadings[2:10, 1:2]) %>% round(., 2) %>% kable()
cbind(prnc$loadings[2:10, 1:2], c("RC2", "RC1", "RC1", "RC1", "RC1", "RC1", "RC2", "RC1", "RC1", "RC2") ) %>% round(., 2) %>% kable()
prnc$loadings[2:10, 1:2]  %>% round(., 2)%>% cbind(., c("RC2", "RC1", "RC1", "RC1", "RC1", "RC1", "RC2", "RC1", "RC1", "RC2")) %>% kable()
prnc <- principal(dats[-1], nfactors = 2, rotate = "none")
prnc$loadings[2:10, 1:2]  %>% round(., 2)%>% cbind(., c("RC2", "RC1", "RC1", "RC1", "RC1", "RC1", "RC2", "RC1", "RC1", "RC2")) %>% kable()
prnc <- principal(dats[-1], nfactors = 2, rotate = "varimax")
prnc$loadings[2:10, 1:2]  %>% round(., 2)%>% cbind(., c("RC2", "RC1", "RC1", "RC1", "RC1", "RC1", "RC2", "RC1", "RC1", "RC2")) %>% kable()
prnc <- principal(dats[-1], nfactors = 2, rotate = "varimax")
prnc$loadings[2:10, 1:2]  %>% round(., 2)%>% cbind(., c("RC2", "RC1", "RC1", "RC1", "RC1", "RC1", "RC2", "RC1", "RC2")) %>% kable()
prnc$loadings[2:10, 1:2]  %>% round(., 2)%>% cbind(., c("RC2", "RC1", "RC1", "RC1", "RC1", "RC2", "RC1", "RC1", "RC2")) %>% kable()
prnc$loadings[2:10, 1:2]  %>% round(., 2)%>% cbind(., "maps to" c("RC2", "RC1", "RC1", "RC1", "RC1", "RC2", "RC1", "RC1", "RC2")) %>% kable()
prnc$loadings[2:10, 1:2]  %>% round(., 2)%>% cbind(., "maps to" = c("RC2", "RC1", "RC1", "RC1", "RC1", "RC2", "RC1", "RC1", "RC2")) %>% kable()
knitr::opts_chunk$set(echo = TRUE)
library(psych)
library(Hmisc)
library(magrittr)
library(knitr)
library(tibble)
dats <- read.csv("drugs_2022.csv", header = T, sep = ";", dec = ",")
# compute the fold change
fldchng <- dats
for (item in 2:11) {
fldchng[item] <- dats[item] / dats$Control
}
# now lets compute the log2 of this data:
lg2.fld <- cbind(as.factor(dats$cytokines), log2(fldchng[3:11]))
str(lg2.fld)
colnames(lg2.fld)[1] <- "cytokine"
boxplot(lg2.fld$cyclosporineA ~ lg2.fld$cytokine,
main = "cyclosporineA",
las = 2,
ylab = "log2 of the fold change",
xlab = ""
)
abline(h = 0, col = "grey")
boxplot(lg2.fld$tacrolimus ~ lg2.fld$cytokine,
main = "tacrolimus",
las = 2,
ylab = "log2 of the fold change",
xlab = ""
)
abline(h = 0, col = "grey")
boxplot(lg2.fld$tofacitinib ~ lg2.fld$cytokine,
main = "tofacitinib",
las = 2,
ylab = "log2 of the fold change",
xlab = ""
)
abline(h = 0, col = "grey")
boxplot(lg2.fld$ruxolitinib ~ lg2.fld$cytokine,
main = "ruxolitinib",
las = 2,
ylab = "log2 of the fold change",
xlab = NA
)
abline(h = 0, col = "grey")
corstars <- function(x){
x <- as.matrix(x)
R <- rcorr(x, type = "pearson")$r
p <- rcorr(x, type = "pearson")$P
## define notions for significance levels; spacing is important.
mystars <- ifelse(p < .001, "*", ifelse(p < .01, "* ", ifelse(p < .05, "* ", " ")))
## trunctuate the matrix that holds the correlations to two decimal
R <- format(round(cbind(rep(-1.11, ncol(x)), R), 2))[,-1]
## build a new matrix that includes the correlations with their apropriate stars
Rnew <- matrix(paste(R, mystars, sep=""), ncol=ncol(x))
diag(Rnew) <- paste(diag(R), " ", sep="")
rownames(Rnew) <- colnames(x)
colnames(Rnew) <- paste(colnames(x), "", sep="")
## remove upper triangle
Rnew <- as.matrix(Rnew)
Rnew[upper.tri(Rnew, diag = TRUE)] <- ""
Rnew <- as.data.frame(Rnew)
## remove last column and return the matrix (which is now a data frame)
Rnew <- cbind(Rnew[1:length(Rnew)-1])
return(Rnew)
}
kable(corstars(lg2.fld[-1]),
caption = "A table showing the pearson-correlation between the tested
drugs of the, the * denotes correlations with p > 0.05")
plot(lg2.fld$ruxolitinib ~ lg2.fld$tofacitinib,
ylab = "log2 fold-change Ruxolitinib",
xlab = "log2 fold-change Tofacitinib",
main = "Scatterplot ruxolitinib vs tofacitinib")
prcA <- prcomp(dats[-1], scale = T)
sds <- prcA$sdev
mean(sds^2)
smry <- summary(prcA)
datsa <- tibble("PC" = c("PC1", "PC2", "PC3", "PC4", "PC5", "PC6", "PC7", "PC8", "PC9", "PC10"),"variance" = round(smry$sdev^2, 2),  "Cumulative Proportion"= round(smry$importance[3,1:10], 3))
kable(datsa, caption = "Variance of our PCA")
prnc <- principal(dats[-1], nfactors = 2, rotate = "varimax")
prnc$loadings[2:10, 1:2]  %>% round(., 2)%>% cbind(., "maps to" = c("RC2", "RC1", "RC1", "RC1", "RC1", "RC2", "RC1", "RC1", "RC2")) %>% kable(., caption = "This table shows the loadings of the rotatet principle components (`RCi`) for the drugs and their also the component which reassembles its maximal loading value")
plot(lg2.fld$tacrolimus ~ prnc$loadings[2:10, 2])
lg2.fld$tacrolimus
plot(lg2.fld$tacrolimus ~ cbind(prnc$loadings[2:10, 2],prnc$loadings[2:10, 2],  prnc$loadings[2:10, 2]))
plot(lg2.fld$tacrolimus ~ rep(prnc$loadings[2:10, 2], 3))
plot( y = lg2.fld$tacrolimus, x = rep(prnc$loadings[2:10, 2], 3))
plot( y = lg2.fld$tacrolimus,
x = rep(prnc$loadings[2:10, 2], 3),
ylab = "Fold change",
xlab = "Loadings of PC2")
plot( y = lg2.fld$tacrolimus,
x = rep(prnc$loadings[2:10, 2], 3),
ylab = "Fold change",
xlab = "Loadings of PC2 (RC2)")
cor(y = lg2.fld$tacrolimus,
cor(y = lg2.fld$tacrolimus,
x = rep(prnc$loadings[2:10, 2], 3)
)
cor(y = lg2.fld$tacrolimus,
cor(y = lg2.fld$tacrolimus,
cor(y = lg2.fld$tacrolimus ~ rep(prnc$loadings[2:10, 2], 3)
cor(y = lg2.fld$tacrolimus ~ rep(prnc$loadings[2:10, 2], 3))
cor(lg2.fld$tacrolimus ~ rep(prnc$loadings[2:10, 2], 3))
cbind(lg2.fld$tacrolimus ~ rep(prnc$loadings[2:10, 2], 3)) %>% cor()
rep
cbind(lg2.fld$tacrolimus,rep(prnc$loadings[2:10, 2], 3)) %>% cor()
tibble("log2 fold-change tacrolimus" = lg2.fld$tacrolimus, "Loadings" = rep(prnc$loadings[2:10, 2], 3)) %>% cor()
tibble("log2 fold-change tacrolimus" = lg2.fld$tacrolimus, "Loadings" = rep(prnc$loadings[2:10, 2], 3)) %>% cor() %>% kab
tibble("log2 fold-change tacrolimus" = lg2.fld$tacrolimus, "Loadings" = rep(prnc$loadings[2:10, 2], 3)) %>% cor() %>% kable()
cormat <- tibble("log2 fold-change tacrolimus" = lg2.fld$tacrolimus, "Loadings" = rep(prnc$loadings[2:10, 2], 3)) %>% cor()
cormat <- tibble("log2 fold-change tacrolimus" = lg2.fld$tacrolimus, "Loadings" = rep(prnc$loadings[2:10, 2], 3)) %>% cor()
```{r, echo = F}
kable(., caption = "Correlation-Matrix for part 7")
kable(cormat, caption = "Correlation-Matrix for part 7")
```{r, echo = F, inc}
vert <- log(2)/.1
abline(h = 50, v = vert, col = "grey")
dec <- function (n0, k, tvec) {
return(n0 * exp( - k * tvec ))
}
plot(0:42, dec(n0 = 100, k = .1, tvec = 0:42), type = "l")
dec <- function (n0, k, tvec) {
return(n0 * exp( - k * tvec ))
}
plot(0:42, dec(n0 = 100, k = .1, tvec = 0:42), type = "l")
## Half-life
The half-life of exponential decay can be reformulated to:
\[t_{1/2} = \frac{ln(2)}{k}\]
For our decay-rate of 0,1 this would generate a half life of `r log(2) / .1`.
We can show that specific point easy in our plot:
```{r}
vert <- log(2)/.1
abline(h = 50, v = vert, col = "grey")
```
## Solving ODE's
Therefor we use the `deSolve` library which supplies us with a numerical solver.
We hand the stuff that needs to be solved as function using `with()` to make variables from parental environments accessible:
```{r}
library(deSolve)
ode1 <- function(tvec, state, parms) {
with(as.list(state), {11
dndt <- rep(0, length(state))
dndt[1] <- - decK * con0
return(list(dndt))
})
}
```
plot(0:42, dec(n0 = 100, k = .1, tvec = 0:42), type = "l")
vert <- log(2)/.1
abline(h = 50, v = vert, col = "grey")
View(fldchng)
library('MOMA')
library('clusterProfiler')
library('org.Hs.eg.db')
library('tidyverse')
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.16")
BiocManager::install(c('MOMA','clusterProfiler','org.Hs.eg.db','STRINGdb'))
library('MOMA')
library('clusterProfiler')
library('org.Hs.eg.db')
library('tidyverse')
library('STRINGdb')
data = read_csv("recons/recons_per_gene.csv") %>% arrange(recon_error)
setwd("~/genericVAE")
data = read_csv("recons/recons_per_gene.csv") %>% arrange(recon_error)
ref = data$name
top_200 = data$name[1:100]
top_200
ego = enrichGO(gene = top_200,
OrgDb = org.Hs.eg.db,
universe = ref,
keyType = "SYMBOL")
barplot(ego)
string_db = STRINGdb$new(species=9606,
score_threshold=200,
input_directory="")
top_200 = data.frame("gene"=top_200)
top_200_mapped = string_db$map(top_200, "gene", removeUnmappedRows = T)
data = read_csv("recons/recons_brcarsemfpkmtcgat.csv", col_names = F)
ref = data$X2
top_200 = data$X2[1:200]
ego = enrichGO(gene = top_200,
OrgDb = org.Hs.eg.db,
universe = ref,
keyType = "SYMBOL")
barplot(ego, showCategory=7)
```{r, include=F}
data = read_csv("recons/recons_per_gene.csv") %>% arrange(recon_error)
ref = data$name
top_200 = data$name[1:200]
top_200
ego = enrichGO(gene = top_200,
OrgDb = org.Hs.eg.db,
universe = ref,
keyType = "SYMBOL")
barplot(ego)
data(geneList, package="DOSE")
gene <- names(geneList)[abs(geneList) > 2]
kk <- enrichKEGG(gene         = gene,
organism     = 'hsa',
pvalueCutoff = 0.05)
head(kk)
data = read_csv("recons/recons_brcarsemfpkmtcgat.csv", col_names = F)
ref = data$X2
top_200 = data$X2[1:200]
ego = enrichGO(gene = top_200,
OrgDb = org.Hs.eg.db,
universe = ref,
keyType = "SYMBOL")
barplot(ego, showCategory=7)
data = read_csv("recons/recons_per_gene.csv") %>% arrange(recon_error)
ref = data$name
top_200 = data$name[1:200]
top_200
eKegg = enrichKEGG(geneList=top_200,
organism = "hsa",
minGSSize    = 120,
pvalueCutoff = 0.05,
verbose      = FALSE)
eKegg = enrichKEGG(geneList=top_200,
organism = "hsa",
minGSSize    = 120,
pvalueCutoff = 0.05,
verbose      = FALSE)
eKegg = enrichKEGG(gene=top_200,
organism = "hsa",
minGSSize    = 120,
pvalueCutoff = 0.05,
verbose      = FALSE)
eKegg = enrichKEGG(gene=top_200,
organism = "hsa")
library(MOMA)
eKegg = enrichKEGG(gene=mapHugo(top_200),
organism = "hsa")
browseKEGG(eKegg)
barplot(eKegg)
library(MOMA)
goplot(ego)
library(MOMA)
## Enrichment in breast cancer rna-seq data from `doi: 10.1038/sdata.2018.61`
```{r}
data = read_csv("recons/recons_brcarsemfpkmtcgat.csv", col_names = F)
ref = data$X2
top_200 = data$X2[1:200]
ego = enrichGO(gene = top_200,
OrgDb = org.Hs.eg.db,
universe = ref,
keyType = "SYMBOL")
ego = enrichGO(gene = top_200,
OrgDb = org.Hs.eg.db,
universe = ref,
keyType = "SYMBOL")
barplot(ego, showCategory=7)
eKegg = enrichKEGG(gene=mapHugo(top_200),
organism = "hsa")
eKegg = enrichKEGG(gene=mapHugo(top_200),
organism = "hsa")
barplot(eKegg)
top_200 = data$X2[1:500]
ego = enrichGO(gene = top_200,
OrgDb = org.Hs.eg.db,
universe = ref,
keyType = "SYMBOL")
ego = enrichGO(gene = top_200,
OrgDb = org.Hs.eg.db,
universe = ref,
keyType = "SYMBOL")
barplot(ego, showCategory=7)
barplot(ego, showCategory=7)
eKegg = enrichKEGG(gene=mapHugo(top_200),
organism = "hsa")
barplot(eKegg)
top_200
mapping = string_db$map(top_200[1:100])
mapping = string_db$map(data.frame("gene"=top_200[1:100]), "gene")
string_db$plot_network(mapping)
last_500 = data$X2[-1:-500]
mapping = string_db$map(data.frame("gene"=top_200), "gene")
last_500 = data$X2[-1:-500]
mapping = string_db$map(data.frame("gene"=last_500), "gene")
mapping = string_db$map(data.frame("gene"=last_500), "gene")
string_db$plot_network(mapping)
string_db$plot_network(mapping)
last_500 = data$X2[-1:-200]
mapping = string_db$map(data.frame("gene"=last_500), "gene")
string_db$plot_network(mapping)
last_500 = trail(data$X2)
last_500 = tail(data$X2)
last()
last_500
last_500 = tail(data$X2, 200)
mapping = string_db$map(data.frame("gene"=last_500), "gene")
string_db$plot_network(mapping)
string_db$plot_network(mapping)
last_500 = tail(data$X2, 100)
mapping = string_db$map(data.frame("gene"=last_500), "gene")
mapping = string_db$map(data.frame("gene"=last_500), "gene")
string_db$plot_network(mapping)
string_db$plot_network(mapping)
ego = enrichGO(gene = last_500,
OrgDb = org.Hs.eg.db,
universe = ref,
keyType = "SYMBOL")
barplot(ego, showCategory=7)
ego = enrichGO(gene = last_500,
OrgDb = org.Hs.eg.db,
universe = ref,
keyType = "SYMBOL")
barplot(ego, showCategory=7)
barplot(ego)
ego
summary(ego)
summary(ego)
head(ego)
ego
data = read_csv("recons/recons_GTEx_mammary.csv")
data
ref = data$name
top_200 = data$name[1:200]
top_200
ego = enrichGO(gene = top_200,
OrgDb = org.Hs.eg.db,
universe = ref,
keyType = "SYMBOL")
barplot(ego)
goplot(ego)
eKegg = enrichKEGG(gene=mapHugo(top_200),
organism = "hsa")
barplot(eKegg)
ego@result
ego@readable
View(ego)
View(ego)
ego@result$pvalue
last_500 = tail(data$X2, 100)
#mapping = string_db$map(data.frame("gene"=last_500), "gene")
#string_db$plot_network(mapping)
ego = enrichGO(gene = last_500,
OrgDb = org.Hs.eg.db,
universe = ref,
keyType = "SYMBOL")
library('clusterProfiler')
library('org.Hs.eg.db')
library('tidyverse')
library('STRINGdb')
data = read_csv("recons/recons_per_gene.csv") %>% arrange(recon_error)
ref = data$name
top_200 = data$name[1:200]
ego = enrichGO(gene = top_200,
OrgDb = org.Hs.eg.db,
universe = ref,
keyType = "SYMBOL")
barplot(ego)
string_db = STRINGdb$new(species=9606,
score_threshold=200,
input_directory="")
goplot(ego)
library(MOMA)
data = read_csv("recons/recons_brcarsemfpkmtcgat.csv", col_names = F)
ref = data$X2
top_200 = data$X2[1:500]
ego = enrichGO(gene = top_200,
OrgDb = org.Hs.eg.db,
universe = ref,
keyType = "SYMBOL")
barplot(ego, showCategory=7)
eKegg = enrichKEGG(gene=mapHugo(top_200),
organism = "hsa")
barplot(eKegg)
mapping = string_db$map(data.frame("gene"=top_200), "gene")
string_db$plot_network(mapping)
last_500 = tail(data$X2, 100)
#mapping = string_db$map(data.frame("gene"=last_500), "gene")
#string_db$plot_network(mapping)
ego = enrichGO(gene = last_500,
OrgDb = org.Hs.eg.db,
universe = ref,
keyType = "SYMBOL")
ego@result$pvalue
